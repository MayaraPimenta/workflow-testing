name: New Release
on:
  pull_request:
    types: [closed]
    branches: [master, main]

permissions:
  pull-requests: write
  contents: write
  actions: read

jobs:
  add-release-label:
    if: github.event.pull_request.merged == true 
    runs-on: ubuntu-latest
    steps:
      - name: Add release label to PR
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['release']
            });
            console.log('Added "release" label to PR #' + context.payload.pull_request.number);

  release:
    if: github.event.pull_request.merged == true 
    runs-on: ubuntu-latest
    needs: add-release-label
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, default to 0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest tag found: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      - name: Get PR labels
        id: get_labels
        run: |
          # Get PR labels using GitHub API
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | tr '\n' ' ')
          echo "PR Labels: $LABELS"
          echo "PR_LABELS=$LABELS" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version bump type
        id: determine_bump
        run: |
          BUMP_TYPE="patch"
          
          # Check for version bump labels
          if echo "${{ env.PR_LABELS }}" | grep -q "major\|breaking"; then
            BUMP_TYPE="major"
          elif echo "${{ env.PR_LABELS }}" | grep -q "minor\|feature"; then
            BUMP_TYPE="minor"
          elif echo "${{ env.PR_LABELS }}" | grep -q "patch\|fix\|bugfix"; then
            BUMP_TYPE="patch"
          fi
          
          echo "Version bump type: $BUMP_TYPE"
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV
      - name: Calculate new version
        id: calc_version
        run: |
          # Parse current version
          CURRENT_VERSION="${{ env.LATEST_TAG }}"
          # Remove 'v' prefix if present
          CURRENT_VERSION=${CURRENT_VERSION#v}
          
          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Bump version based on type
          case "${{ env.BUMP_TYPE }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      - name: Get last commit from each merged branch
        id: get-commits
        run: |
          echo "Analyzing commits between main and develop..."
          
          # Pega todos os commits merge na develop que nÃ£o estÃ£o na main
          merge_commits=$(git log main..develop --merges --pretty=format:"%H %s" | grep -E "Merge (pull request|branch)")
          
          echo "## ðŸ“‹ Resumo dos Commits por Branch" >> commit_summary.md
          echo "" >> commit_summary.md
          
          if [ -z "$merge_commits" ]; then
            echo "Nenhum merge commit encontrado entre main e develop" >> commit_summary.md
          else            
            # Processa cada merge commit
            while IFS= read -r merge_line; do
              if [ -n "$merge_line" ]; then
                merge_hash=$(echo "$merge_line" | cut -d' ' -f1)
                merge_message=$(echo "$merge_line" | cut -d' ' -f2-)
                
                # Extrai o nome da branch do merge commit
                branch_name=$(echo "$merge_message" | sed -n 's/.*from \([^[:space:]]*\).*/\1/p' | sed 's/.*\///')
                
                if [ -z "$branch_name" ]; then
                  # Tenta extrair de outras formas comuns
                  branch_name=$(echo "$merge_message" | sed -n 's/.*Merge branch \'\([^'\'']*\)\'.*/\1/p')
                fi
                
                if [ -n "$branch_name" ] && [ "$branch_name" != "develop" ] && [ "$branch_name" != "main" ] && [ "$branch_name" != "master" ]; then
                  # Pega o Ãºltimo commit da branch antes do merge
                  last_commit_hash=$(git log --format="%H" -n 1 ${merge_hash}^2 2>/dev/null || echo "")
                  
                  if [ -n "$last_commit_hash" ]; then
                    commit_message=$(git log --format="%s" -n 1 $last_commit_hash)
                    commit_author=$(git log --format="%an" -n 1 $last_commit_hash)
                    commit_date=$(git log --format="%ad" --date=short -n 1 $last_commit_hash)
                    
                    echo "| \`$branch_name\` | $commit_message | $commit_author | $commit_date |" >> commit_summary.md
                  fi
                fi
              fi
            done <<< "$merge_commits"
          fi
          
          echo "" >> commit_summary.md
          echo "---" >> commit_summary.md
          echo "*Gerado automaticamente em $(date)*" >> commit_summary.md
          
          # Define output para usar em outros steps
          echo "summary_created=true" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          name: "Release v${{ env.NEW_VERSION }}"
          body: |
            ðŸš€ **Nova versÃ£o ${{ env.NEW_VERSION }} lanÃ§ada!**
            
            **Tipo de release:** ${{ env.BUMP_TYPE }}
            
            ## ðŸ“‹ AlteraÃ§Ãµes
            
            cat commit_summary.md
            
            ---
            
            **Merge da PR:** #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "### ðŸŽ‰ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** v${{ env.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type:** ${{ env.BUMP_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Labels:** ${{ env.PR_LABELS }}" >> $GITHUB_STEP_SUMMARY
