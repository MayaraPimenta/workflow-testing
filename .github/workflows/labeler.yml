name: Custom Branch Labeler

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [develop, master, main]
  workflow_run:
    workflows: ["Auto PR Feature branch to Develop"]
    types: [completed]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Get PR info for workflow_run trigger
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the most recent PR to develop branch
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'develop',
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.length > 0) {
              const pr = prs[0];
              // Set outputs for the labeling step
              core.setOutput('pr_number', pr.number);
              core.setOutput('branch_name', pr.head.ref);
              core.setOutput('target_branch', pr.base.ref);
            }
        id: get_pr_info

      - name: Label PR based on branch name
        uses: actions/github-script@v7
        with:
          script: |
            let branchName, targetBranch, prNumber;
            
            if (context.eventName === 'workflow_run') {
              // Get info from previous step
              branchName = '${{ steps.get_pr_info.outputs.branch_name }}';
              targetBranch = '${{ steps.get_pr_info.outputs.target_branch }}';
              prNumber = '${{ steps.get_pr_info.outputs.pr_number }}';
            } else {
              // Normal pull_request_target event
              branchName = context.payload.pull_request.head.ref;
              targetBranch = context.payload.pull_request.base.ref;
              prNumber = context.payload.pull_request.number;
            }
            
            if (!branchName || !prNumber) {
              console.log('Could not determine PR info, skipping labeling');
              return;
            }
            
            let labels = [];
            
            // Check if PR is from main/master to develop (hotfix sync)
            if ((branchName === 'main' || branchName === 'master') && targetBranch === 'develop') {
              labels.push('hotfix-synced');
            }
            // Check if PR is from develop to master (release)
            else if (branchName === 'develop' && (targetBranch === 'master' || targetBranch === 'main')) {
              labels.push('release');
            }
            // Check branch name patterns
            else if (branchName.startsWith('feature/') || branchName.startsWith('feat/')) {
              labels.push('feature');
            } else if (branchName.startsWith('bugfix/') || branchName.startsWith('fix/')) {
              labels.push('bugfix');
            } else if (branchName.startsWith('refactor/')) {
              labels.push('refactor');
            } else if (branchName.startsWith('chore/')) {
              labels.push('chore');
            } else if (branchName.startsWith('hotfix/')) {
              labels.push('hotfix');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: labels
              });
              
              console.log(`Added labels: ${labels.join(', ')} to PR #${prNumber}`);
            } else {
              console.log(`No matching labels found for branch: ${branchName}`);
            }